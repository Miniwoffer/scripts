#!/bin/bash

# LICENCE:  MIT
# AUTHOR:   Odin Hultgren van der Horst <odin@vanderhorst.no>
# URL:      github.com/miniwoffel/scripts

# A simple command line tool to store and retrieve secrets in a gpg encrypted file.
# you can specifiy what gpg key to use with the environment variable SECRET_GPG_KEY
# Simply put 'export SECRET_GPG_KEY=yourkey' in your .bashrc or .zshrc
#
# You can also specify the folder where the secrets are stored with the environment variable SECRET_FOLDER
#
# To get started, run the following commands: 'secret help'

if [ "$SECRET_FOLDER" = "" ]; then
	FOLDER=~/.secrets
else
	FOLDER=$SECRET_FOLDER
fi
mkdir -p $FOLDER

if [ "$SECRET_GPG_KEY" = "" ]; then
	echo "Please set the environment variable SECRET_GPG_KEY to your gpg key"
	echo "eks:"
	echo "	export SECRET_GPG_KEY=yourkey"
	exit 1
fi

cmd_help(){
	echo "Usage: secret <subcommand> [options]"
	echo "Subcommands:"
	echo "    set <key> <value>  store a secret"
	echo "    get <key>          get a secret"
	echo "    delete <key>       delete a secret"
	echo "    list               list all secrets"
}

cmd_set() {
	FILE=$FOLDER/$1
	echo $2 > $FILE
	gpg -e -r $SECRET_GPG_KEY $FILE
	shred $FILE
	rm $FILE
}

cmd_get() {
	FILE=$FOLDER/$1.gpg
	gpg --batch -q -d $FILE
}

cmd_delete() {
	FILE=$FOLDER/$1.gpg
	if [ -f "$FILE" ]; then
		echo "Are you sure you want to delete '$1'? [y/N]"
		read -r response
		if [[ $response =~ ^([yY][eE][sS]|[yY])$ ]]
		then
			rm $FILE
		fi
	else
		echo "No secret found"
	fi
}

cmd_list() {
	for file in $FOLDER/*.gpg; do
		if [ -f "$file" ]; then
			echo $(basename $file | cut -d'.' -f1)
		else
			echo "No secrets found"
		fi
	done
}

subcommand=$1
if [ $# -ge 1 ]; then
	shift
	cmd_${subcommand} $@
	if [ $? = 127 ]; then
		echo "Error: '$subcommand' is not a known subcommand." >&2
		echo ""
		cmd_help
		exit 1
	fi
else
	cmd_help
fi
